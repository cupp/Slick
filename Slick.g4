grammar Slick;

proof : step (hint step)+ END ;

step: expr;

expr : expr '[' varlist '‚âî' exprlist ']'
   | expr '[' VAR ',' expr ']'
   | functionCall
   | '¬¨' expr
   | expr ADDOP expr
   | expr '‚òÖ' expr
   | expr RELOP expr
   | expr JOP expr
   | expr IMPOP expr
   | expr EQOP expr
   | EVAR
   | VAR
   | 'true'
   | 'false'
   | NUM
   | quantifiedExpr
   | setEnumeration
   | setComprehension
   | '(' expr ')'
;

hint : '=' '‚å©' .*? '‚å™' ;
varlist : typedVar (',' typedVar)* ;
exprlist : expr (',' expr)* ;
quantifiedExpr : '(' QUANTIFIER varlist '|' expr ':' expr ')' ;
setEnumeration : '{' (expr (',' expr)*)? '}' ;
setComprehension : '{' typedVar '|' expr ':' expr '}' ;
functionCall : VAR '.' expr | VAR '(' expr ')' ;
typedVar : VAR (':' TYPE)? ;

EVAR : [A-Z] ;
VAR : [a-z] ;
TYPE : '‚Ñ§' | '‚Ñï' | '‚Ñ§+' | '‚Ñ§-' | '‚Ñö' | '‚Ñù' | '‚Ñù+' | 'ùîπ' ;
NUM : ([0-9]('.' [0-9]+)?) | ([1-9][0-9]*('.' [0-9]+)?) ;
ADDOP : '+' | '-' | '‚à™' | '‚à©';
RELOP : '=' | '<' | '>' | '‚â§' | '‚â•' | '‚àà' | '‚äÇ' | '‚äÜ' | '‚äÉ' | '‚äá';
JOP : '‚ãÄ' | '‚ãÅ' ;
IMPOP : '‚áí'| '‚áê' | '‚áè' | '‚áç';
EQOP : '‚â°' | '‚â¢' ;
QUANTIFIER : '‚òÖ' | '‚àÄ' | '‚àÉ' ;
WS : [ \t\r\n]+ -> skip ;
END : '‚ï±‚ï±' ;
